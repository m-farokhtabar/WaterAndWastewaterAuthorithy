<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <Color x:Key="ColorBackgroundWindow">#008ecf</Color>
    <SolidColorBrush x:Key="BrushBackgroundWindow" Color="{StaticResource ResourceKey=ColorBackgroundWindow}"/>
    <Style x:Key="BaseStyle" TargetType="{x:Type Control}">
        <Setter Property="FontFamily" Value="B Nazanin Bold"/>
        <Setter Property="FlowDirection" Value="RightToLeft"/>  
        <Setter Property="IsTabStop" Value="False"/>
    </Style>
    <Style x:Key="ImportantText" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="Red"/>        
    </Style>
    <Style x:Key="WindowStyle" TargetType="{x:Type Window}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="ResizeMode" Value="NoResize"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Background" Value="{StaticResource ResourceKey=BrushBackgroundWindow}"/>
    </Style>
    <Style TargetType="{x:Type StatusBar}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <!-- Start Style Of Buttons In Main Menu-->
    <Style x:Key="MainMenuButton" TargetType="{x:Type Border}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="Opacity">
                        <DoubleAnimation From="1" To="0.7" Duration="0:0:0.25"></DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="Opacity">
                        <DoubleAnimation From="0.7" To="1" Duration="0:0:0.25"></DoubleAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="2"/>
                <Setter Property="BorderBrush" Value="white"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
    </Style>

    <Style x:Key="MainMenuButtonTop" BasedOn="{StaticResource ResourceKey=MainMenuButton}" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Color="#FF01317d" Offset="0"/>
                    <GradientStop Color="#FF013b9e" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainMenuButtonMiddleRight" BasedOn="{StaticResource ResourceKey=MainMenuButton}" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Color="#FFab1b3e" Offset="0"/>
                    <GradientStop Color="#FFba214d" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MainMenuButtonMiddleLeft" BasedOn="{StaticResource ResourceKey=MainMenuButton}" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Color="#FF008b01" Offset="0"/>
                    <GradientStop Color="#FF00a501" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MainMenuButtonBottomLeft" BasedOn="{StaticResource ResourceKey=MainMenuButton}" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Color="#FF00b1f4" Offset="0"/>
                    <GradientStop Color="#FF00c3f0" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="MainMenuButtonBottomRight" BasedOn="{StaticResource ResourceKey=MainMenuButton}" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="#ff008ed0">
        </Setter>
    </Style>
    <Style x:Key="MainMenuButtonExit" BasedOn="{StaticResource ResourceKey=MainMenuButton}" TargetType="{x:Type Border}">
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Color="#FFc4b31d" Offset="0"/>
                    <GradientStop Color="#FFbb971a" Offset="1"/>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TextOfMainMenuButton" TargetType="{x:Type TextBlock}">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Foreground"    Value="White"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Margin" Value="5 0 0 0"/>
    </Style>
<!-- End Style Of Buttons In Main Menu-->



<!-- Start Style Of Header And Footer In windows-->
    <Color x:Key="ColorBackgroundFooter">#ff323335</Color>
    <SolidColorBrush x:Key="BrushBackgroundFooter" Color="{StaticResource ResourceKey=ColorBackgroundFooter}"/>
    <Color x:Key="ColorBackgroundButtonFooter">#FF686767</Color>
    <SolidColorBrush x:Key="BrushBackgroundButtonFooter" Color="{StaticResource ResourceKey=ColorBackgroundButtonFooter}"/>
    <Color x:Key="ColorBackgroundHighLightButtonFooter">#FFff6800</Color>    
    <SolidColorBrush x:Key="BrushBackgroundHighLightButtonFooter" Color="{StaticResource ResourceKey=ColorBackgroundButtonFooter}"/>
    
    <Color x:Key="ColorBackgroundButtonCustomerHeader">#FF446caa</Color>
    <SolidColorBrush x:Key="BrushBackgroundButtonCustomerHeader" Color="{StaticResource ResourceKey=ColorBackgroundButtonCustomerHeader}"/>

    <Color x:Key="ColorBackgroundButtonCustomerHeaderRed">#FFaa444b</Color>
    <SolidColorBrush x:Key="BrushBackgroundButtonCustomerHeaderRed" Color="{StaticResource ResourceKey=ColorBackgroundButtonCustomerHeaderRed}"/>

    <Color x:Key="ColorBackgroundButtonCustomerHeaderGreen">#FF00a401</Color>
    <SolidColorBrush x:Key="BrushBackgroundButtonCustomerHeaderGreen" Color="{StaticResource ResourceKey=ColorBackgroundButtonCustomerHeaderGreen}"/>

    <Style x:Key="DialogButtons" TargetType="{x:Type Border}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                        <ColorAnimation  To="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"  Duration="0:0:0.2"></ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                        <ColorAnimation  From="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}" Duration="0:0:0.2"></ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="White"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="White"/>
    </Style>

    <Style x:Key="FooterButtons" TargetType="{x:Type Border}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                        <ColorAnimation  From="{StaticResource ResourceKey=ColorBackgroundButtonFooter}" To="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"  Duration="0:0:0.2"></ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                        <ColorAnimation  From="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}" To="{StaticResource ResourceKey=ColorBackgroundButtonFooter}" Duration="0:0:0.2"></ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="White"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="White"/>
    </Style>
    
    <Style x:Key="HeaderButtons" TargetType="{x:Type Border}">
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.MouseEnter">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                        <ColorAnimation  To="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"  Duration="0:0:0.2"></ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.MouseLeave">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="(Background).(SolidColorBrush.Color)">
                        <ColorAnimation  From="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"  Duration="0:0:0.2"></ColorAnimation>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="White"/>
            </Trigger>
        </Style.Triggers>
        <Setter Property="Cursor" Value="Hand"/>        
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="BorderBrush" Value="White"/>
    </Style>
    

    <Style x:Key="ReturnButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="HorizontalAlignment"  Value="Right"/>
        <Setter Property="VerticalAlignment"    Value="Center"/>
        <Setter Property="ToolTipService.IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{StaticResource ResourceKey=BrushBackgroundButtonFooter}" Style="{StaticResource ResourceKey=FooterButtons}">
                        <Grid Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="34"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="32"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Image     Grid.Column="0" Grid.Row="0" Source="{DynamicResource ResourceKey=ImageButton}" Width="24" Height="24"/>
                            <TextBlock Grid.Column="1" Grid.Row="0" Style="{StaticResource ResourceKey=TextOfMainMenuButton}" VerticalAlignment="Center" Text="{TemplateBinding Property=Content}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="DialogButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="HorizontalAlignment"  Value="Right"/>
        <Setter Property="VerticalAlignment"    Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="BorderDialogButton"  Background="{StaticResource ResourceKey=BrushBackgroundButtonFooter}" Style="{StaticResource ResourceKey=DialogButtons}">
                        <Grid Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="28"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="26"></ColumnDefinition>
                                <ColumnDefinition Width="*"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Image Grid.Column="0" Grid.Row="0" Source="{DynamicResource ResourceKey=ImageButton}" Width="16" Height="16"/>
                            <TextBlock Grid.Column="1" Grid.Row="0" Style="{StaticResource ResourceKey=TextOfMainMenuButton}" VerticalAlignment="Center" Text="{TemplateBinding Property=Content}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="BorderDialogButton" Property="Background" Value="#FFff6800"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="TitleOfWindows" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground"    Value="#ffebe9fd"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Padding" Value="0 0 0 0"/>
    </Style>
    <Style x:Key="TitleOfDialog" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground"    Value="#ffebe9fd"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Padding" Value="0 0 0 0"/>
    </Style>

    <Style x:Key="HeaderButton" TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="HorizontalAlignment"  Value="Right"/>
        <Setter Property="VerticalAlignment"    Value="Center"/>
        <Setter Property="ToolTipService.IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="BorderOfHeaderButtons" Background="{StaticResource ResourceKey=BrushBackgroundButtonCustomerHeader}" Style="{StaticResource ResourceKey=HeaderButtons}">
                        <Grid Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"></RowDefinition>
                                <RowDefinition Height="25"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding Width}"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Image   x:Name="ImageOfHeaderButtons" Grid.Column="0" Grid.Row="0" Source="{DynamicResource ResourceKey=ImageButton}" Width="24" Height="24" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                            <TextBlock x:Name="TextOfHeaderButtons" Grid.Column="0" Grid.Row="1" Style="{StaticResource ResourceKey=TextOfMainMenuButton}" VerticalAlignment="Center" Text="{TemplateBinding Property=Content}" HorizontalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HeaderButtonRed" TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="HorizontalAlignment"  Value="Right"/>
        <Setter Property="VerticalAlignment"    Value="Center"/>
        <Setter Property="ToolTipService.IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="BorderOfHeaderButtons" Background="{StaticResource ResourceKey=BrushBackgroundButtonCustomerHeaderRed}" Style="{StaticResource ResourceKey=HeaderButtons}">
                        <Grid Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"></RowDefinition>
                                <RowDefinition Height="25"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding Width}"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Image   x:Name="ImageOfHeaderButtons" Grid.Column="0" Grid.Row="0" Source="{DynamicResource ResourceKey=ImageButton}" Width="24" Height="24" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                            <TextBlock x:Name="TextOfHeaderButtons" Grid.Column="0" Grid.Row="1" Style="{StaticResource ResourceKey=TextOfMainMenuButton}" VerticalAlignment="Center" Text="{TemplateBinding Property=Content}" HorizontalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="HeaderButtonGreen" TargetType="{x:Type Button}" BasedOn="{StaticResource ResourceKey=BaseStyle}">
        <Setter Property="HorizontalAlignment"  Value="Right"/>
        <Setter Property="VerticalAlignment"    Value="Center"/>
        <Setter Property="ToolTipService.IsEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border x:Name="BorderOfHeaderButtons" Background="{StaticResource ResourceKey=BrushBackgroundButtonCustomerHeaderGreen}" Style="{StaticResource ResourceKey=HeaderButtons}">
                        <Grid Margin="0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="30"></RowDefinition>
                                <RowDefinition Height="25"></RowDefinition>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{TemplateBinding Width}"></ColumnDefinition>
                            </Grid.ColumnDefinitions>
                            <Image   x:Name="ImageOfHeaderButtons" Grid.Column="0" Grid.Row="0" Source="{DynamicResource ResourceKey=ImageButton}" Width="24" Height="24" VerticalAlignment="Center"  HorizontalAlignment="Center"/>
                            <TextBlock x:Name="TextOfHeaderButtons" Grid.Column="0" Grid.Row="1" Style="{StaticResource ResourceKey=TextOfMainMenuButton}" VerticalAlignment="Center" Text="{TemplateBinding Property=Content}" HorizontalAlignment="Center" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource ResourceKey=ColorBackgroundHighLightButtonFooter}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- End    Style Of Header And Footer In windows-->

<!-- Start Style Of Validations-->
    <ControlTemplate x:Key="ValidationTemplateTextBox">
            <AdornedElementPlaceholder/>            
    </ControlTemplate>
<!-- Start Style Of Validations-->

    <!-- Start Style Of Customers-->
    <Color x:Key="ColorWaterMark">#ff919090</Color>
    <SolidColorBrush x:Key="BrushWaterMark" Color="{StaticResource ResourceKey=ColorWaterMark}"/>

    <Style x:Key="TextOfFields" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground"    Value="Black"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="0 0 10 0"/>
    </Style>
    <Style x:Key="WaterMarkOfFields" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground"    Value="{StaticResource ResourceKey=BrushWaterMark}"/>
        <Setter Property="FontSize" Value="11"/>
        <Setter Property="Padding" Value="4 0 0 0"/>
    </Style>
    <Style x:Key="TooltipOfFields" TargetType="{x:Type ContentPresenter}">
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Margin" Value="4 0 0 0"/>        
    </Style>
    <Style TargetType="{x:Type ToolTip}">
        <Setter Property="Foreground" Value="#6d6d6d"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Name="Border" Background="White" BorderBrush="#5c5c5c"
                        BorderThickness="1.5" Width="{TemplateBinding Width}" Height="Auto" CornerRadius="4">
                        <Grid Margin="3 6 3 6" FlowDirection="RightToLeft">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image             Grid.Column="0" Grid.Row="0" Source="../Images/Windows/Tooltip/Warning.png" Width="16" Height="16"/>
                            <ContentPresenter  Grid.Column="1" Grid.Row="0" Style="{StaticResource ResourceKey=TooltipOfFields}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ImageTooltip" TargetType="{x:Type ToolTip}">
        <Setter Property="Foreground" Value="#6d6d6d"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolTip}">
                    <Border Name="Border" Background="White" BorderBrush="#5c5c5c"
                        BorderThickness="1.5" Width="{TemplateBinding Width}" Height="Auto" CornerRadius="4">
                        <Grid Margin="3 6 3 6" FlowDirection="RightToLeft">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="16"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image             Grid.Column="0" Grid.Row="0" Source="../Images/Windows/Tooltip/Info.png" Width="16" Height="16"/>
                            <ContentPresenter  Grid.Column="1" Grid.Row="0" Style="{StaticResource ResourceKey=TooltipOfFields}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="EditOfFields" TargetType="{x:Type TextBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Grid>
                        <Border x:Name="BorderTextBox" CornerRadius="4" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"  Background="White" Cursor="IBeam">
                            <ScrollViewer x:Name="PART_ContentHost"/>
                        </Border>
                        <TextBlock x:Name="WatermarkTextBox" Text="{TemplateBinding Tag}" Style="{StaticResource ResourceKey=WaterMarkOfFields}"></TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WatermarkTextBox" Property="Visibility" Value="Hidden"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsFocused" Value="False"/>
                                <Condition Property="Text" Value=""/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="WatermarkTextBox" Property="Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="WatermarkTextBox" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="BorderTextBox"    Property="Background" Value="#ffc2c1c1"/>
                            <Setter TargetName="BorderTextBox"    Property="BorderBrush" Value="#ffffffff"/>
                            <Setter Property="Foreground" Value="White" />
                        </Trigger>
                        <Trigger Property="Validation.HasError" Value="true">
                            <Setter Property="ToolTip"
                                    Value="{Binding RelativeSource={x:Static RelativeSource.Self},
                                    Path=(Validation.Errors)[0].ErrorContent}"/>
                            <Setter TargetName="BorderTextBox" Property="Background" Value="#fffeefef"/>
                        </Trigger>                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!--Setter Property="Template" Value="{StaticResource txt}"/-->
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Foreground"    Value="Black"/>
        <Setter Property="Background"    Value="Transparent"/>
        <Setter Property="Height"    Value="25"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="BorderBrush" Value="#d3d3d3"/>
        <Setter Property="BorderThickness" Value="0.75"/>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Transparent" BlurRadius="0" ShadowDepth='0' />
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1" CenterY="12.5"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.GotFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" From="Yellow" To="Yellow" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" From="0" To="8" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1" To="1.4" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1" To="1.4" Duration="0:0:0.25" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.LostFocus">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="Effect">
                        <ColorAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" From="Transparent" To="Transparent" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" From="8" To="0" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1.4" To="1" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1.4" To="1" Duration="0:0:0.25" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
    <Style x:Key="RadioTemplate" TargetType="{x:Type RadioButton}">
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="Transparent" BlurRadius="0" ShadowDepth='0' />
            </Setter.Value>
        </Setter>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="1" ScaleY="1" CenterY="12.5"/>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <EventTrigger RoutedEvent="UIElement.GotFocus">
                <BeginStoryboard>
                    <Storyboard>
                        <ColorAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" From="Yellow" To="Yellow" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" From="0" To="6" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1" To="1.2" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1" To="1.2" Duration="0:0:0.25" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
            <EventTrigger RoutedEvent="UIElement.LostFocus">
                <BeginStoryboard>
                    <Storyboard Storyboard.TargetProperty="Effect">
                        <ColorAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.Color)" From="Transparent" To="Transparent" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.Effect).(DropShadowEffect.BlurRadius)" From="6" To="0" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)" From="1.2" To="1" Duration="0:0:0.25" />
                        <DoubleAnimation Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)" From="1.2" To="1" Duration="0:0:0.25" />
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>